// File path: app/src/androidTest/java/com/lkms/ProtocolRepositoryImplTest.java
package com.lkms;

import androidx.test.ext.junit.runners.AndroidJUnit4;

import com.lkms.data.model.java.Protocol;
import com.lkms.data.model.java.ProtocolItem;
import com.lkms.data.model.java.ProtocolStep;
import com.lkms.data.repository.IProtocolRepository;
// ‚úÖ S·ª¨A 1: IMPORT ENUM
import com.lkms.data.repository.enumPackage.java.LKMSConstantEnums.ProtocolApproveStatus;
import com.lkms.data.repository.implement.java.ProtocolRepositoryImplJava;

import org.junit.Test;
import org.junit.runner.RunWith;

import java.util.ArrayList;
import java.util.List;

import static junit.framework.TestCase.*;

@RunWith(AndroidJUnit4.class)
public class ProtocolRepositoryImplTest {

    private final IProtocolRepository repository = new ProtocolRepositoryImplJava();
    private final long testTimeout = 5000L; // 5 gi√¢y

    // ‚úÖ 1. Test UC3: L·∫•y danh s√°ch t·∫•t c·∫£ protocol
    @Test
    public void testGetAllProtocols() throws InterruptedException {
        System.out.println("üß™ B·∫Øt ƒë·∫ßu test: L·∫•y t·∫•t c·∫£ protocol...");

        repository.getAllProtocols(new IProtocolRepository.ProtocolListCallback() {
            @Override
            public void onSuccess(List<Protocol> protocols) {
                System.out.println("‚úÖ [Th√†nh c√¥ng] L·∫•y danh s√°ch protocol th√†nh c√¥ng. S·ªë l∆∞·ª£ng: " + protocols.size());
                assertTrue("Danh s√°ch protocol kh√¥ng ƒë∆∞·ª£c r·ªóng", !protocols.isEmpty());
                for (Protocol p : protocols) {
                    // Hi·ªÉn th·ªã t√™n c·ªßa Enum
                    System.out.println("   - ID: " + p.getProtocolId() + ", Title: " + p.getProtocolTitle() + ", Status: " + p.getApproveStatus().name());
                    assertNotNull(p.getProtocolId());
                }
            }

            @Override
            public void onError(String errorMessage) {
                System.out.println("‚ùå [Th·∫•t b·∫°i] L·ªói: " + errorMessage);
                fail("Th·∫•t b·∫°i khi l·∫•y protocol: " + errorMessage);
            }
        });

        Thread.sleep(testTimeout);
    }

    // ‚úÖ 2. Test UC4: L·∫•y chi ti·∫øt m·ªôt protocol (g·ªìm protocol, steps, items)
    @Test
    public void testGetProtocolDetails() throws InterruptedException {
        int protocolIdToTest = 1; // ‚ö†Ô∏è THAY B·∫∞NG ID C√ì TH·∫¨T

        System.out.println("üß™ B·∫Øt ƒë·∫ßu test: L·∫•y chi ti·∫øt protocol ID = " + protocolIdToTest + "...");

        repository.getProtocolDetails(protocolIdToTest, new IProtocolRepository.ProtocolContentCallback() {
            @Override
            public void onProtocolReceived(Protocol protocol) {
                System.out.println("‚úÖ [Th√†nh c√¥ng] Nh·∫≠n ƒë∆∞·ª£c th√¥ng tin protocol: " + protocol.getProtocolTitle());
                assertNotNull(protocol);
                assertEquals(protocolIdToTest, (int) protocol.getProtocolId());
            }

            @Override
            public void onStepsReceived(List<ProtocolStep> steps) {
                System.out.println("‚úÖ [Th√†nh c√¥ng] Nh·∫≠n ƒë∆∞·ª£c " + steps.size() + " b∆∞·ªõc (steps).");
            }

            @Override
            public void onItemsReceived(List<ProtocolItem> items) {
                System.out.println("‚úÖ [Th√†nh c√¥ng] Nh·∫≠n ƒë∆∞·ª£c " + items.size() + " v·∫≠t t∆∞ (items).");
            }

            @Override
            public void onError(String errorMessage) {
                System.out.println("‚ùå [Th·∫•t b·∫°i] L·ªói khi l·∫•y chi ti·∫øt: " + errorMessage);
                fail("Th·∫•t b·∫°i khi l·∫•y chi ti·∫øt protocol: " + errorMessage);
            }
        });

        Thread.sleep(testTimeout);
    }

    // ‚úÖ 3. Test UC3: T·∫°o m·ªôt protocol m·ªõi (c√πng v·ªõi steps v√† items)
    @Test
    public void testCreateNewProtocol() throws InterruptedException {
        System.out.println("üß™ B·∫Øt ƒë·∫ßu test: T·∫°o protocol m·ªõi...");

        int creatorId = 1; // ‚ö†Ô∏è Thay cho ph√π h·ª£p
        long timestamp = System.currentTimeMillis();

        // Protocol ch√≠nh
        Protocol newProtocol = new Protocol();
        newProtocol.setProtocolTitle("Protocol Test t·ª´ Android " + timestamp);
        newProtocol.setVersionNumber("1.0");
        newProtocol.setIntroduction("Gi·ªõi thi·ªáu ƒë∆∞·ª£c t·∫°o t·ª± ƒë·ªông.");
        newProtocol.setSafetyWarning("C·∫£nh b√°o an to√†n: Lu√¥n c·∫©n th·∫≠n.");

        // Steps
        List<ProtocolStep> newSteps = new ArrayList<>();
        newSteps.add(new ProtocolStep(null, 1, 1, null));
        newSteps.add(new ProtocolStep(null, 2, 2, null));
        newSteps.add(new ProtocolStep(null, 3, 3, null));

        // Items
        List<ProtocolItem> newItems = new ArrayList<>();
        newItems.add(new ProtocolItem(1, 1, 1)); // ‚ö†Ô∏è Thay itemId th·∫≠t
        newItems.add(new ProtocolItem(1, 2, 2));
        newItems.add(new ProtocolItem(2, 3, 3));

        repository.createNewProtocol(newProtocol, newSteps, newItems, creatorId, new IProtocolRepository.ProtocolIdCallback() {
            @Override
            public void onSuccess(int protocolId) {
                System.out.println("‚úÖ [Th√†nh c√¥ng] ƒê√£ t·∫°o protocol m·ªõi th√†nh c√¥ng v·ªõi ID = " + protocolId);
                assertTrue("ID tr·∫£ v·ªÅ ph·∫£i l·ªõn h∆°n 0", protocolId > 0);
            }

            @Override
            public void onError(String errorMessage) {
                System.out.println("‚ùå [Th·∫•t b·∫°i] L·ªói khi t·∫°o protocol: " + errorMessage);
                fail("Th·∫•t b·∫°i khi t·∫°o protocol: " + errorMessage);
            }
        });

        Thread.sleep(testTimeout);
    }

    // ‚úÖ 4. Test UC20/UC21: Ph√™ duy·ªát protocol
    @Test
    public void testApproveProtocol() throws InterruptedException {
        int protocolIdToApprove = 4; // ‚ö†Ô∏è Thay ID th·∫≠t
        int approverId = 1; // ‚ö†Ô∏è Lab Manager ID

        System.out.println("üß™ B·∫Øt ƒë·∫ßu test: Ph√™ duy·ªát protocol ID = " + protocolIdToApprove + "...");

        // ‚úÖ S·ª¨A 2: G·ªçi h√†m v·ªõi Enum.APPROVED thay v√¨ boolean `true`
        repository.approveProtocol(protocolIdToApprove, approverId, ProtocolApproveStatus.APPROVED, null, new IProtocolRepository.GenericCallback() {
            @Override
            public void onSuccess() {
                System.out.println("‚úÖ [Th√†nh c√¥ng] ƒê√£ ph√™ duy·ªát protocol ID " + protocolIdToApprove + "!");
            }

            @Override
            public void onError(String errorMessage) {
                System.out.println("‚ùå [Th·∫•t b·∫°i] L·ªói khi ph√™ duy·ªát: " + errorMessage);
                fail("Th·∫•t b·∫°i khi ph√™ duy·ªát protocol: " + errorMessage);
            }
        });

        Thread.sleep(testTimeout);
    }

    // ‚úÖ 5. Test UC20/UC21: T·ª´ ch·ªëi protocol
    @Test
    public void testRejectProtocol() throws InterruptedException {
        int protocolIdToReject = 10; // ‚ö†Ô∏è Thay ID th·∫≠t
        int approverId = 1;
        String reason = "L√Ω do t·ª´ ch·ªëi: C√°c b∆∞·ªõc kh√¥ng ƒë·ªß r√µ r√†ng.";

        System.out.println("üß™ B·∫Øt ƒë·∫ßu test: T·ª´ ch·ªëi protocol ID = " + protocolIdToReject + "...");

        // ‚úÖ S·ª¨A 3: G·ªçi h√†m v·ªõi Enum.REJECTED thay v√¨ boolean `false`
        repository.approveProtocol(protocolIdToReject, approverId, ProtocolApproveStatus.REJECTED, reason, new IProtocolRepository.GenericCallback() {
            @Override
            public void onSuccess() {
                System.out.println("‚úÖ [Th√†nh c√¥ng] ƒê√£ t·ª´ ch·ªëi protocol ID " + protocolIdToReject + "!");
            }

            @Override
            public void onError(String errorMessage) {
                System.out.println("‚ùå [Th·∫•t b·∫°i] L·ªói khi t·ª´ ch·ªëi: " + errorMessage);
                fail("Th·∫•t b·∫°i khi t·ª´ ch·ªëi protocol: " + errorMessage);
            }
        });

        Thread.sleep(testTimeout);
    }

    // ===============================================================================
    // C√ÅC H√ÄM TEST M·ªöI
    // ===============================================================================

    // ‚úÖ Test m·ªõi: L·∫•y th∆∞ vi·ªán ch√≠nh (ƒë√£ duy·ªát v√† m·ªõi nh·∫•t)
    @Test
    public void testGetLatestApprovedProtocols() throws InterruptedException {
        System.out.println("üß™ B·∫Øt ƒë·∫ßu test: L·∫•y c√°c protocol ƒë√£ duy·ªát v√† m·ªõi nh·∫•t...");
        final java.util.concurrent.CountDownLatch latch = new java.util.concurrent.CountDownLatch(1);

        repository.getLatestApprovedProtocols(new IProtocolRepository.ProtocolListCallback() {
            @Override
            public void onSuccess(List<Protocol> protocols) {
                System.out.println("‚úÖ [Th√†nh c√¥ng] L·∫•y danh s√°ch protocol ƒë√£ duy·ªát th√†nh c√¥ng. S·ªë l∆∞·ª£ng: " + protocols.size());
                assertNotNull("Danh s√°ch protocol kh√¥ng ƒë∆∞·ª£c l√† null", protocols);

                for (Protocol p : protocols) {
                    System.out.println("   - ID: " + p.getProtocolId() + ", Title: " + p.getProtocolTitle() + ", Status: " + p.getApproveStatus());
                    // ‚úÖ S·ª¨A 4: So s√°nh Enum v·ªõi Enum, kh√¥ng ph·∫£i v·ªõi String
                    assertEquals("M·ªçi protocol trong danh s√°ch n√†y ph·∫£i c√≥ tr·∫°ng th√°i APPROVED", ProtocolApproveStatus.APPROVED, p.getApproveStatus());
                }
                latch.countDown();
            }

            @Override
            public void onError(String errorMessage) {
                fail("Th·∫•t b·∫°i khi l·∫•y protocol ƒë√£ duy·ªát: " + errorMessage);
                latch.countDown();
            }
        });

        if (!latch.await(10, java.util.concurrent.TimeUnit.SECONDS)) {
            fail("Test h·∫øt th·ªùi gian ch·ªù m√† kh√¥ng nh·∫≠n ƒë∆∞·ª£c callback t·ª´ getLatestApprovedProtocols.");
        }
    }

    // ... (C√°c test kh√°c gi·ªØ nguy√™n v√¨ kh√¥ng b·ªã ·∫£nh h∆∞·ªüng tr·ª±c ti·∫øp b·ªüi Enum)

    // ‚úÖ Test m·ªõi: T√¨m ki·∫øm protocol theo ti√™u ƒë·ªÅ
    @Test
    public void testSearchProtocolsByTitle() throws InterruptedException {
        String searchQuery = "Test"; // ‚ö†Ô∏è ƒê·∫£m b·∫£o c√≥ protocol ch·ª©a t·ª´ "Test" trong ti√™u ƒë·ªÅ ƒë·ªÉ test
        System.out.println("üß™ B·∫Øt ƒë·∫ßu test: T√¨m ki·∫øm protocol v·ªõi ti√™u ƒë·ªÅ ch·ª©a '" + searchQuery + "'...");
        final java.util.concurrent.CountDownLatch latch = new java.util.concurrent.CountDownLatch(1);

        repository.searchProtocolsByTitle(searchQuery, new IProtocolRepository.ProtocolListCallback() {
            @Override
            public void onSuccess(List<Protocol> protocols) {
                System.out.println("‚úÖ [Th√†nh c√¥ng] T√¨m ki·∫øm th√†nh c√¥ng. S·ªë l∆∞·ª£ng k·∫øt qu·∫£: " + protocols.size());
                assertNotNull(protocols);
                //assertTrue("Ph·∫£i t√¨m th·∫•y √≠t nh·∫•t m·ªôt k·∫øt qu·∫£ cho t·ª´ kh√≥a '" + searchQuery + "'", !protocols.isEmpty());

                for (Protocol p : protocols) {
                    System.out.println("   - ID: " + p.getProtocolId() + ", Title: " + p.getProtocolTitle());
                    assertTrue("Ti√™u ƒë·ªÅ protocol ph·∫£i ch·ª©a t·ª´ kh√≥a t√¨m ki·∫øm",
                            p.getProtocolTitle().toLowerCase().contains(searchQuery.toLowerCase()));
                }
                latch.countDown();
            }

            @Override
            public void onError(String errorMessage) {
                fail("Th·∫•t b·∫°i khi t√¨m ki·∫øm protocol: " + errorMessage);
                latch.countDown();
            }
        });

        if (!latch.await(10, java.util.concurrent.TimeUnit.SECONDS)) {
            fail("Test h·∫øt th·ªùi gian ch·ªù m√† kh√¥ng nh·∫≠n ƒë∆∞·ª£c callback t·ª´ searchProtocolsByTitle.");
        }
    }

    // ‚úÖ Test m·ªõi: L·ªçc protocol theo nhi·ªÅu ƒëi·ªÅu ki·ªán
    @Test
    public void testFilterProtocols() throws InterruptedException {
        Integer creatorIdToTest = 2;      // ‚ö†Ô∏è Thay b·∫±ng creator ID c√≥ th·∫≠t trong DB c·ªßa b·∫°n
        String versionToTest = "3.0";   // ‚ö†Ô∏è Thay b·∫±ng version c√≥ th·∫≠t

        System.out.println("üß™ B·∫Øt ƒë·∫ßu test: L·ªçc protocol v·ªõi creator ID = " + creatorIdToTest + " v√† version = " + versionToTest + "...");
        final java.util.concurrent.CountDownLatch latch = new java.util.concurrent.CountDownLatch(1);

        repository.filterProtocols(creatorIdToTest, versionToTest, new IProtocolRepository.ProtocolListCallback() {
            @Override
            public void onSuccess(List<Protocol> protocols) {
                System.out.println("‚úÖ [Th√†nh c√¥ng] L·ªçc th√†nh c√¥ng. S·ªë l∆∞·ª£ng k·∫øt qu·∫£: " + protocols.size());
                assertNotNull(protocols);
                //assertTrue("Ph·∫£i t√¨m th·∫•y √≠t nh·∫•t m·ªôt protocol v·ªõi ƒëi·ªÅu ki·ªán l·ªçc n√†y", !protocols.isEmpty());

                for (Protocol p : protocols) {
                    System.out.println("   - ID: " + p.getProtocolId() + ", Title: " + p.getProtocolTitle() + ", Version: " + p.getVersionNumber() + ", CreatorID: " + p.getCreatorUserId());
                    assertEquals("Creator ID c·ªßa protocol ph·∫£i kh·ªõp", creatorIdToTest, p.getCreatorUserId());
                    assertEquals("Version c·ªßa protocol ph·∫£i kh·ªõp", versionToTest, p.getVersionNumber());
                }
                latch.countDown();
            }

            @Override
            public void onError(String errorMessage) {
                fail("Th·∫•t b·∫°i khi l·ªçc protocol: " + errorMessage);
                latch.countDown();
            }
        });

        if (!latch.await(10, java.util.concurrent.TimeUnit.SECONDS)) {
            fail("Test h·∫øt th·ªùi gian ch·ªù m√† kh√¥ng nh·∫≠n ƒë∆∞·ª£c callback t·ª´ filterProtocols.");
        }
    }

}
