// File path: app/src/androidTest/java/com/lkms/ProtocolRepositoryImplTest.java
package com.lkms;

import androidx.test.ext.junit.runners.AndroidJUnit4;

import com.lkms.data.model.java.Protocol;
import com.lkms.data.model.java.ProtocolItem;
import com.lkms.data.model.java.ProtocolStep;
import com.lkms.data.repository.IProtocolRepository;
import com.lkms.data.repository.implement.java.ProtocolRepositoryImplJava;

import org.junit.Test;
import org.junit.runner.RunWith;

import java.util.ArrayList;
import java.util.List;

import static junit.framework.TestCase.*;

@RunWith(AndroidJUnit4.class)
public class ProtocolRepositoryImplTest {

    private final IProtocolRepository repository = new ProtocolRepositoryImplJava();
    private final long testTimeout = 5000L; // 5 gi√¢y

    // ‚úÖ 1. Test UC3: L·∫•y danh s√°ch t·∫•t c·∫£ protocol
    @Test
    public void testGetAllProtocols() throws InterruptedException {
        System.out.println("üß™ B·∫Øt ƒë·∫ßu test: L·∫•y t·∫•t c·∫£ protocol...");

        repository.getAllProtocols(new IProtocolRepository.ProtocolListCallback() {
            @Override
            public void onSuccess(List<Protocol> protocols) {
                System.out.println("‚úÖ [Th√†nh c√¥ng] L·∫•y danh s√°ch protocol th√†nh c√¥ng. S·ªë l∆∞·ª£ng: " + protocols.size());
                assertTrue("Danh s√°ch protocol kh√¥ng ƒë∆∞·ª£c r·ªóng", !protocols.isEmpty());
                for (Protocol p : protocols) {
                    System.out.println("   - ID: " + p.getProtocolId() + ", Title: " + p.getProtocolTitle() + ", Status: " + p.getApproveStatus());
                    assertNotNull(p.getProtocolId());
                }
            }

            @Override
            public void onError(String errorMessage) {
                System.out.println("‚ùå [Th·∫•t b·∫°i] L·ªói: " + errorMessage);
                fail("Th·∫•t b·∫°i khi l·∫•y protocol: " + errorMessage);
            }
        });

        Thread.sleep(testTimeout);
    }

    // ‚úÖ 2. Test UC4: L·∫•y chi ti·∫øt m·ªôt protocol (g·ªìm protocol, steps, items)
    @Test
    public void testGetProtocolDetails() throws InterruptedException {
        int protocolIdToTest = 1; // ‚ö†Ô∏è THAY B·∫∞NG ID C√ì TH·∫¨T

        System.out.println("üß™ B·∫Øt ƒë·∫ßu test: L·∫•y chi ti·∫øt protocol ID = " + protocolIdToTest + "...");

        repository.getProtocolDetails(protocolIdToTest, new IProtocolRepository.ProtocolContentCallback() {
            @Override
            public void onProtocolReceived(Protocol protocol) {
                System.out.println("‚úÖ [Th√†nh c√¥ng] Nh·∫≠n ƒë∆∞·ª£c th√¥ng tin protocol: " + protocol.getProtocolTitle());
                assertNotNull(protocol);
                assertEquals(protocolIdToTest, (int) protocol.getProtocolId());
            }

            @Override
            public void onStepsReceived(List<ProtocolStep> steps) {
                System.out.println("‚úÖ [Th√†nh c√¥ng] Nh·∫≠n ƒë∆∞·ª£c " + steps.size() + " b∆∞·ªõc (steps).");
            }

            @Override
            public void onItemsReceived(List<ProtocolItem> items) {
                System.out.println("‚úÖ [Th√†nh c√¥ng] Nh·∫≠n ƒë∆∞·ª£c " + items.size() + " v·∫≠t t∆∞ (items).");
            }

            @Override
            public void onError(String errorMessage) {
                System.out.println("‚ùå [Th·∫•t b·∫°i] L·ªói khi l·∫•y chi ti·∫øt: " + errorMessage);
                fail("Th·∫•t b·∫°i khi l·∫•y chi ti·∫øt protocol: " + errorMessage);
            }
        });

        Thread.sleep(testTimeout);
    }

    // ‚úÖ 3. Test UC3: T·∫°o m·ªôt protocol m·ªõi (c√πng v·ªõi steps v√† items)
    @Test
    public void testCreateNewProtocol() throws InterruptedException {
        System.out.println("üß™ B·∫Øt ƒë·∫ßu test: T·∫°o protocol m·ªõi...");

        int creatorId = 1; // ‚ö†Ô∏è Thay cho ph√π h·ª£p
        long timestamp = System.currentTimeMillis();

        // Protocol ch√≠nh
        Protocol newProtocol = new Protocol();
        newProtocol.setProtocolTitle("Protocol Test t·ª´ Android " + timestamp);
        newProtocol.setVersionNumber("1.0");
        newProtocol.setIntroduction("Gi·ªõi thi·ªáu ƒë∆∞·ª£c t·∫°o t·ª± ƒë·ªông.");
        newProtocol.setSafetyWarning("C·∫£nh b√°o an to√†n: Lu√¥n c·∫©n th·∫≠n.");

        // Steps
        List<ProtocolStep> newSteps = new ArrayList<>();
        newSteps.add(new ProtocolStep(null, 1, 1, null));
        newSteps.add(new ProtocolStep(null, 2, 2, null));
        newSteps.add(new ProtocolStep(null, 3, 3, null));

        // Items
        List<ProtocolItem> newItems = new ArrayList<>();
        newItems.add(new ProtocolItem(1, 1, 1)); // ‚ö†Ô∏è Thay itemId th·∫≠t
        newItems.add(new ProtocolItem(1, 2, 2));
        newItems.add(new ProtocolItem(2, 3, 3));

        repository.createNewProtocol(newProtocol, newSteps, newItems, creatorId, new IProtocolRepository.ProtocolIdCallback() {
            @Override
            public void onSuccess(int protocolId) {
                System.out.println("‚úÖ [Th√†nh c√¥ng] ƒê√£ t·∫°o protocol m·ªõi th√†nh c√¥ng v·ªõi ID = " + protocolId);
                assertTrue("ID tr·∫£ v·ªÅ ph·∫£i l·ªõn h∆°n 0", protocolId > 0);
            }

            @Override
            public void onError(String errorMessage) {
                System.out.println("‚ùå [Th·∫•t b·∫°i] L·ªói khi t·∫°o protocol: " + errorMessage);
                fail("Th·∫•t b·∫°i khi t·∫°o protocol: " + errorMessage);
            }
        });

        Thread.sleep(testTimeout);
    }

    // ‚úÖ 4. Test UC20/UC21: Ph√™ duy·ªát protocol
    @Test
    public void testApproveProtocol() throws InterruptedException {
        int protocolIdToApprove = 4; // ‚ö†Ô∏è Thay ID th·∫≠t
        int approverId = 1; // ‚ö†Ô∏è Lab Manager ID

        System.out.println("üß™ B·∫Øt ƒë·∫ßu test: Ph√™ duy·ªát protocol ID = " + protocolIdToApprove + "...");

        repository.approveProtocol(protocolIdToApprove, approverId, true, null, new IProtocolRepository.GenericCallback() {
            @Override
            public void onSuccess() {
                System.out.println("‚úÖ [Th√†nh c√¥ng] ƒê√£ ph√™ duy·ªát protocol ID " + protocolIdToApprove + "!");
            }

            @Override
            public void onError(String errorMessage) {
                System.out.println("‚ùå [Th·∫•t b·∫°i] L·ªói khi ph√™ duy·ªát: " + errorMessage);
                fail("Th·∫•t b·∫°i khi ph√™ duy·ªát protocol: " + errorMessage);
            }
        });

        Thread.sleep(testTimeout);
    }

    // ‚úÖ 5. Test UC20/UC21: T·ª´ ch·ªëi protocol
    @Test
    public void testRejectProtocol() throws InterruptedException {
        int protocolIdToReject = 10; // ‚ö†Ô∏è Thay ID th·∫≠t
        int approverId = 1;
        String reason = "L√Ω do t·ª´ ch·ªëi: C√°c b∆∞·ªõc kh√¥ng ƒë·ªß r√µ r√†ng.";

        System.out.println("üß™ B·∫Øt ƒë·∫ßu test: T·ª´ ch·ªëi protocol ID = " + protocolIdToReject + "...");

        repository.approveProtocol(protocolIdToReject, approverId, false, reason, new IProtocolRepository.GenericCallback() {
            @Override
            public void onSuccess() {
                System.out.println("‚úÖ [Th√†nh c√¥ng] ƒê√£ t·ª´ ch·ªëi protocol ID " + protocolIdToReject + "!");
            }

            @Override
            public void onError(String errorMessage) {
                System.out.println("‚ùå [Th·∫•t b·∫°i] L·ªói khi t·ª´ ch·ªëi: " + errorMessage);
                fail("Th·∫•t b·∫°i khi t·ª´ ch·ªëi protocol: " + errorMessage);
            }
        });

        Thread.sleep(testTimeout);
    }
}
