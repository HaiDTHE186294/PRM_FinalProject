//package com.lkms
//
//import com.lkms.data.repository.implement.InventoryRepositoryImpl
//import com.lkms.data.repository.IInventoryRepository
//import kotlinx.coroutines.runBlocking
//import com.lkms.data.model.Item
//import org.junit.Test
//import java.util.*
//import java.io.File
//import androidx.test.platform.app.InstrumentationRegistry
//class InventoryRepositoryImplTest {
//    private val repo = InventoryRepositoryImpl()
//
//    // ‚úÖ 1. Test l·∫•y t·∫•t c·∫£ c√°c Item trong kho
//    @Test
//    fun testGetAllInventoryItems() = runBlocking {
//        repo.getAllInventoryItems(object : IInventoryRepository.InventoryListCallback {
//            override fun onSuccess(result: List<Item>) {
//                println("‚úÖ Loaded ${result.size} inventory items.")
//                result.forEach {
//                    println(" - ${it.itemName} | ID: ${it.itemId}")
//                }
//            }
//
//            override fun onError(error: String) {
//                println("‚ùå Error: $error")
//            }
//        })
//        Thread.sleep(3000)
//    }
//
//    // ‚úÖ 2. Test t√¨m ki·∫øm Item trong kho (theo t√™n ho·∫∑c CAS)
//    @Test
//    fun testSearchInventory() = runBlocking {
//        val query = "1" // üîç th·ª≠ v·ªõi t·ª´ kh√≥a ho·∫∑c CAS th·∫≠t
//        repo.searchInventory(query, object : IInventoryRepository.InventoryListCallback {
//            override fun onSuccess(result: List<Item>) {
//                println("‚úÖ Found ${result.size} items for query '$query'")
//                result.forEach {
//                    println(" - ${it.itemName} | CAS: ${it.casNumber}")
//                }
//            }
//
//            override fun onError(error: String) {
//                println("‚ùå No items found: $error")
//            }
//        })
//        Thread.sleep(3000)
//    }
//
//    // ‚úÖ 3. Test l·∫•y SDS URL theo CAS number
//    @Test
//    fun testGetSdsUrl() = runBlocking {
//        val casNumber = "S1" // üîπ thay b·∫±ng CAS th·∫≠t c√≥ trong DB c·ªßa b·∫°n
//        repo.getSdsUrl(casNumber, object : IInventoryRepository.StringCallback {
//            override fun onSuccess(result: String) {
//                println("‚úÖ SDS URL for $casNumber: $result")
//            }
//
//            override fun onError(error: String) {
//                println("‚ùå Failed to get SDS: $error")
//            }
//        })
//        Thread.sleep(3000)
//    }
//
//    // ‚úÖ 4. Test th√™m m·ªõi Item v√†o kho
//    @Test
//    fun testAddNewInventoryItem() = runBlocking {
//        val newItem = Item(
//            itemId = null, // üëà auto-increment
//            itemName = "Test Chemical",
//            casNumber = "1234-56-7",
//            lotNumber = "LOT-001",
//            quantity = 50,
//            unit = "g",
//            location = "Shelf A3",
//            expirationDate = "2026-12-31"
//        )
//
//        repo.addNewInventoryItem(newItem, object : IInventoryRepository.InventoryItemCallback {
//            override fun onSuccess(result: Item) {
//                println("‚úÖ Added new item successfully: ${result.itemName} | ID: ${result.itemId}")
//            }
//
//            override fun onError(error: String) {
//                println("‚ùå Failed to add new item: $error")
//            }
//        })
//        Thread.sleep(3000)
//    }
//
//
//    // ‚úÖ 5. Test update Item ƒë√£ c√≥ trong kho
//    @Test
//    fun testUpdateInventoryItem() = runBlocking {
//        // üëá Gi·∫£ s·ª≠ item c√≥ s·∫µn trong DB v·ªõi ID = 1
//        val itemIdToUpdate = 3
//
//        // üëá T·∫°o d·ªØ li·ªáu c·∫≠p nh·∫≠t
//        val updatedItem = Item(
//            itemId = itemIdToUpdate,
//            itemName = "Test Chemical (Updated)",
//            casNumber = "1234-56-7",
//            lotNumber = "LOT-001",
//            quantity = 75, // c·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng
//            unit = "g",
//            location = "Shelf B2", // ƒë·ªïi v·ªã tr√≠
//            expirationDate = "2027-01-15" // ƒë·ªïi h·∫°n
//        )
//
//        repo.updateInventoryItem(itemIdToUpdate, updatedItem, object : IInventoryRepository.InventoryItemCallback {
//            override fun onSuccess(result: Item) {
//                println("‚úÖ Item updated successfully:")
//                println("   ID: ${result.itemId}")
//                println("   Name: ${result.itemName}")
//                println("   Quantity: ${result.quantity}")
//                println("   Location: ${result.location}")
//                println("   Expiry: ${result.expirationDate}")
//            }
//
//            override fun onError(error: String) {
//                println("‚ùå Failed to update item: $error")
//            }
//        })
//
//        // ƒê·ª£i coroutine ho√†n t·∫•t (ch·ªâ d√πng trong test)
//        Thread.sleep(3000)
//    }
//
//
//    // 6. ‚úÖ Test upload file SDS l√™n Supabase Storage.
//    @Test
//    fun testUploadFileSdsToStorage() = runBlocking {
//        val context = InstrumentationRegistry.getInstrumentation().targetContext
//
//        // --- 1Ô∏è‚É£ T·∫°o file m·∫´u ---
//        val testFile = File(context.filesDir, "sds_sample.txt")
//        if (testFile.exists()) testFile.delete() // tr√°nh file cache c≈©
//        testFile.writeText("This is a dummy SDS file for upload test.")
//
//        println("üìÇ File created: ${testFile.absolutePath}")
//        println("üìè Size: ${testFile.length()} bytes")
//
//        // --- 2Ô∏è‚É£ G·ªçi upload ---
//        repo.uploadFileSdsToStorage(
//            file = testFile,
//            callback = object : IInventoryRepository.StringCallback {
//                override fun onSuccess(result: String) {
//                    println("‚úÖ Upload successful!")
//                    println("üåê Public URL: $result")
//                }
//
//                override fun onError(error: String) {
//                    println("‚ùå Upload failed: $error")
//                    assert(false) // fail test
//                }
//            }
//        )
//
//        // --- 3Ô∏è‚É£ Ch·ªù coroutine ho√†n t·∫•t ---
//        Thread.sleep(5000)
//    }
//
//    // 7. ‚úÖ  Test add casNumber v√† url v√†o b·∫£ng SDS
//    @Test
//    fun testAddSds() = runBlocking {
//        val casNumber = "S2"
//        val url = "https://fpt-team-pw6hkgsc.atlassian.net/jira/software/projects/PF/boards/34"
//
//        repo.addSds(casNumber, url, object : IInventoryRepository.IdCallback {
//            override fun onSuccess(result: String) {
//                println("‚úÖ SDS added successfully with sdsId: $result")
//            }
//
//            override fun onError(error: String) {
//                println("‚ùå Failed to add SDS: $error")
//            }
//        })
//
//        // ƒê·ª£i m·ªôt ch√∫t ƒë·ªÉ coroutine th·ª±c thi xong
//        Thread.sleep(3000)
//    }
//
//}