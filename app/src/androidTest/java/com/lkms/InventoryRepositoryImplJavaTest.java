package com.lkms;

import androidx.test.ext.junit.runners.AndroidJUnit4;
import androidx.test.platform.app.InstrumentationRegistry;

import com.lkms.data.model.java.Item;
import com.lkms.data.repository.IInventoryRepository;
import com.lkms.data.repository.implement.java.InventoryRepositoryImplJava;

import org.junit.Test;
import org.junit.runner.RunWith;

import java.io.File;
import java.io.FileWriter;
import java.util.Date;
import java.util.List;

@RunWith(AndroidJUnit4.class)
public class InventoryRepositoryImplJavaTest {

    private final InventoryRepositoryImplJava repo = new InventoryRepositoryImplJava();
    private static final int SLEEP_TIME_MS = 3000; // Th·ªùi gian ch·ªù cho c√°c y√™u c·∫ßu c∆° b·∫£n

    // ----------------------------------------------------------------------------------
    // ‚úÖ 1. Test l·∫•y t·∫•t c·∫£ c√°c Item trong kho
    // ----------------------------------------------------------------------------------
    @Test
    public void testGetAllInventoryItems() throws InterruptedException {
        repo.getAllInventoryItems(new IInventoryRepository.InventoryListCallback() {
            @Override
            public void onSuccess(List<Item> result) {
                System.out.println("‚úÖ Loaded " + (result != null ? result.size() : 0) + " inventory items.");
                if (result != null) {
                    for (Item item : result) {
                        System.out.println(" - " + item.getItemName() + " | ID: " + item.getItemId());
                    }
                }
            }

            @Override
            public void onError(String error) {
                System.out.println("‚ùå Error: " + error);
            }
        });
        Thread.sleep(SLEEP_TIME_MS);
    }

    // ----------------------------------------------------------------------------------
    // ‚úÖ 2. Test t√¨m ki·∫øm Item trong kho (theo t√™n ho·∫∑c CAS)
    // ----------------------------------------------------------------------------------
    @Test
    public void testSearchInventory() throws InterruptedException {
        final String query = "Test Chemical"; // üîç Th·ª≠ v·ªõi t·ª´ kh√≥a gi·∫£ ƒë·ªãnh

        repo.searchInventory(query, new IInventoryRepository.InventoryListCallback() {
            @Override
            public void onSuccess(List<Item> result) {
                System.out.println("‚úÖ Found " + (result != null ? result.size() : 0) + " items for query '" + query + "'");
                if (result != null) {
                    for (Item item : result) {
                        System.out.println(" - " + item.getItemName() + " | CAS: " + item.getCasNumber());
                    }
                }
            }

            @Override
            public void onError(String error) {
                System.out.println("‚ùå No items found: " + error);
            }
        });
        Thread.sleep(SLEEP_TIME_MS);
    }

    // ----------------------------------------------------------------------------------
    // ‚úÖ 3. Test l·∫•y SDS URL theo CAS number
    // ----------------------------------------------------------------------------------
    @Test
    public void testGetSdsUrl() throws InterruptedException {
        final String casNumber = "S1"; // üîπ Thay b·∫±ng CAS th·∫≠t c√≥ trong DB

        repo.getSdsUrl(casNumber, new IInventoryRepository.StringCallback() {
            @Override
            public void onSuccess(String result) {
                System.out.println("‚úÖ SDS URL for " + casNumber + ": " + result);
            }

            @Override
            public void onError(String error) {
                System.out.println("‚ùå Failed to get SDS: " + error);
            }
        });
        Thread.sleep(SLEEP_TIME_MS);
    }

    // ----------------------------------------------------------------------------------
    // ‚úÖ 4. Test th√™m m·ªõi Item v√†o kho
    // ----------------------------------------------------------------------------------
    @Test
    public void testAddNewInventoryItem() throws InterruptedException {
        final String uniqueName = "Test Item " + System.currentTimeMillis();

        final Item newItem = new Item(
                null, // auto-increment
                uniqueName,
                "9876-54-3",
                "LOT-" + System.currentTimeMillis(),
                100,
                "mL",
                "Shelf C1",
                "2027-01-01"
        );

        repo.addNewInventoryItem(newItem, new IInventoryRepository.InventoryItemCallback() {
            @Override
            public void onSuccess(Item result) {
                System.out.println("‚úÖ Added new item successfully: " + result.getItemName() + " | ID: " + result.getItemId());
            }

            @Override
            public void onError(String error) {
                System.out.println("‚ùå Failed to add new item: " + error);
            }
        });
        Thread.sleep(SLEEP_TIME_MS);
    }

    // ----------------------------------------------------------------------------------
    // ‚úÖ 5. Test update Item ƒë√£ c√≥ trong kho
    // ----------------------------------------------------------------------------------
    @Test
    public void testUpdateInventoryItem() throws InterruptedException {
        final int itemIdToUpdate = 3; // L∆ØU √ù: Thay b·∫±ng ID c√≥ s·∫µn trong DB

        final Item updatedData = new Item(
                itemIdToUpdate,
                "Chemical (Updated: " + new Date() + ")", // T√™n m·ªõi
                "1234-56-7",
                "LOT-001",
                150, // S·ªë l∆∞·ª£ng m·ªõi
                "g",
                "Shelf B2",
                "2027-01-15"
        );

        repo.updateInventoryItem(itemIdToUpdate, updatedData, new IInventoryRepository.InventoryItemCallback() {
            @Override
            public void onSuccess(Item result) {
                System.out.println("‚úÖ Item updated successfully: ID " + result.getItemId());
                System.out.println("   Quantity: " + result.getQuantity());
            }

            @Override
            public void onError(String error) {
                System.out.println("‚ùå Failed to update item: " + error);
            }
        });
        Thread.sleep(SLEEP_TIME_MS);
    }

    // ----------------------------------------------------------------------------------
    // ‚úÖ 6. Test upload file SDS l√™n Supabase Storage v√† th√™m b·∫£n ghi SDS
    // ----------------------------------------------------------------------------------
    @Test
    public void testUploadAndAddSds() throws Exception {
        var context = InstrumentationRegistry.getInstrumentation().getTargetContext();

        // --- 1Ô∏è‚É£ T·∫°o file m·∫´u ---
        final File testFile = new File(context.getFilesDir(), "sds_java_sample_" + System.currentTimeMillis() + ".txt");
        if (testFile.exists()) testFile.delete();
        try (FileWriter writer = new FileWriter(testFile)) {
            writer.write("This is a dummy SDS file for upload test in Java.");
        }

        System.out.println("üìÇ File created: " + testFile.getAbsolutePath() + ", size = " + testFile.length() + " bytes");

        // --- 2Ô∏è‚É£ Upload file ---
        repo.uploadFileSdsToStorage(
                testFile,
                new IInventoryRepository.StringCallback() {
                    @Override
                    public void onSuccess(String fileUrl) {
                        System.out.println("‚úÖ Upload successful! Public URL: " + fileUrl);

                        // --- 3Ô∏è‚É£ Th√™m b·∫£n ghi SDS v√†o DB ---
                        final String uniqueCasNumber = "CAS-" + System.currentTimeMillis();
                        repo.addSds(
                                uniqueCasNumber,
                                fileUrl,
                                new IInventoryRepository.IdCallback() {
                                    @Override
                                    public void onSuccess(String result) {
                                        System.out.println("‚úÖ SDS added successfully with sdsId (CAS): " + result);
                                        // D·ªçn d·∫πp file m·∫´u sau khi test ho√†n t·∫•t
                                        if (testFile.exists()) testFile.delete();
                                    }

                                    @Override
                                    public void onError(String error) {
                                        System.out.println("‚ùå Error adding SDS record: " + error);
                                    }
                                }
                        );
                    }

                    @Override
                    public void onError(String error) {
                        System.out.println("‚ùå Error uploading file: " + error);
                    }
                }
        );

        // Ch·ªù l√¢u h∆°n v√¨ bao g·ªìm c·∫£ upload v√† 1 cu·ªôc g·ªçi DB sau ƒë√≥
        Thread.sleep(7000);
    }

    // ----------------------------------------------------------------------------------
    // ‚úÖ 7. Test add casNumber v√† url v√†o b·∫£ng SDS (d·∫°ng ƒë∆°n gi·∫£n, kh√¥ng upload)
    // ----------------------------------------------------------------------------------
    @Test
    public void testAddSdsSimple() throws InterruptedException {
        final String uniqueCasNumber = "CAS-" + System.currentTimeMillis();
        final String url = "https://mock-url/sds/" + uniqueCasNumber + ".pdf";

        repo.addSds(uniqueCasNumber, url, new IInventoryRepository.IdCallback() {
            @Override
            public void onSuccess(String result) {
                System.out.println("‚úÖ SDS added successfully with sdsId (CAS): " + result);
            }

            @Override
            public void onError(String error) {
                System.out.println("‚ùå Failed to add SDS: " + error);
            }
        });

        Thread.sleep(SLEEP_TIME_MS);
    }
}