// File path: app/src/androidTest/java/com/lkms/ProtocolRepositoryImplTest.kt
package com.lkms

import androidx.test.ext.junit.runners.AndroidJUnit4
import com.lkms.data.model.Protocol
import com.lkms.data.model.ProtocolItem
import com.lkms.data.model.ProtocolStep
import com.lkms.data.repository.IProtocolRepository
import com.lkms.data.repository.implement.ProtocolRepositoryImpl
import junit.framework.TestCase.assertEquals
import junit.framework.TestCase.assertNotNull
import junit.framework.TestCase.assertTrue
import kotlinx.coroutines.runBlocking
import org.junit.Test
import org.junit.runner.RunWith

/**
 * L·ªõp n√†y d√πng ƒë·ªÉ ki·ªÉm th·ª≠ c√°c ch·ª©c nƒÉng c·ªßa ProtocolRepositoryImpl.
 * M·ªói h√†m @Test s·∫Ω ki·ªÉm tra m·ªôt ch·ª©c nƒÉng ƒë∆∞·ª£c ƒë·ªãnh nghƒ©a trong IProtocolRepository.
 *
 * QUAN TR·ªåNG:
 * - H√£y ƒë·∫£m b·∫£o b·∫°n c√≥ d·ªØ li·ªáu m·∫´u trong c√°c b·∫£ng Supabase ƒë·ªÉ c√°c b√†i test 'get' c√≥ th·ªÉ th√†nh c√¥ng.
 * - Thay ƒë·ªïi c√°c gi√° tr·ªã ID (v√≠ d·ª•: protocolId, userId) ƒë·ªÉ kh·ªõp v·ªõi d·ªØ li·ªáu c·ªßa b·∫°n trong DB.
 * - Ch·∫°y t·ª´ng b√†i test b·∫±ng c√°ch nh·∫•n v√†o n√∫t ‚ñ∂ m√†u xanh l√° c√¢y b√™n c·∫°nh m·ªói h√†m @Test.
 */
@RunWith(AndroidJUnit4::class)
class ProtocolRepositoryImplTest {

    private val repository: IProtocolRepository = ProtocolRepositoryImpl()

    // Th·ªùi gian ch·ªù cho m·ªói request m·∫°ng ƒë·ªÉ ƒë·∫£m b·∫£o coroutine c√≥ ƒë·ªß th·ªùi gian ho√†n th√†nh.
    private val testTimeout = 5000L // 5 gi√¢y

    // ‚úÖ 1. Test UC3: L·∫•y danh s√°ch t·∫•t c·∫£ protocol
    @Test
    fun testGetAllProtocols() = runBlocking {
        println("üß™ B·∫Øt ƒë·∫ßu test: L·∫•y t·∫•t c·∫£ protocol...")

        repository.getAllProtocols(object : IProtocolRepository.ProtocolListCallback {
            override fun onSuccess(protocols: List<Protocol>) {
                println("‚úÖ [Th√†nh c√¥ng] L·∫•y danh s√°ch protocol th√†nh c√¥ng. S·ªë l∆∞·ª£ng: ${protocols.size}")
                assertTrue("Danh s√°ch protocol kh√¥ng ƒë∆∞·ª£c r·ªóng", protocols.isNotEmpty())
                protocols.forEach {
                    println("   - ID: ${it.protocolId}, Title: ${it.protocolTitle}, Status: ${it.approveStatus}")
                    assertNotNull(it.protocolId)
                }
            }

            override fun onError(errorMessage: String) {
                println("‚ùå [Th·∫•t b·∫°i] L·ªói: $errorMessage")
                assertTrue("Th·∫•t b·∫°i khi l·∫•y protocol: $errorMessage", false)
            }
        })
        Thread.sleep(testTimeout) // Ch·ªù cho coroutine ho√†n th√†nh
    }

    // ‚úÖ 2. Test UC4: L·∫•y chi ti·∫øt m·ªôt protocol (g·ªìm protocol, steps, items)
    @Test
    fun testGetProtocolDetails() = runBlocking {
        val protocolIdToTest = 1 // ‚ö†Ô∏è THAY ƒê·ªîI ID n√†y th√†nh m·ªôt ID protocol T·ªíN T·∫†I trong DB c·ªßa b·∫°n

        println("üß™ B·∫Øt ƒë·∫ßu test: L·∫•y chi ti·∫øt protocol ID = $protocolIdToTest...")

        repository.getProtocolDetails(protocolIdToTest, object : IProtocolRepository.ProtocolContentCallback {
            override fun onProtocolReceived(protocol: Protocol) {
                println("‚úÖ [Th√†nh c√¥ng] Nh·∫≠n ƒë∆∞·ª£c th√¥ng tin protocol: ${protocol.protocolTitle}")
                assertNotNull(protocol)
                assertEquals(protocolIdToTest, protocol.protocolId)
            }

            override fun onStepsReceived(steps: List<ProtocolStep>) {
                println("‚úÖ [Th√†nh c√¥ng] Nh·∫≠n ƒë∆∞·ª£c ${steps.size} b∆∞·ªõc (steps).")
                // B·∫°n c√≥ th·ªÉ th√™m assert ·ªü ƒë√¢y ƒë·ªÉ ki·ªÉm tra steps kh√¥ng r·ªóng n·∫øu protocol ƒë√≥ c√≥ steps
            }

            override fun onItemsReceived(items: List<ProtocolItem>) {
                println("‚úÖ [Th√†nh c√¥ng] Nh·∫≠n ƒë∆∞·ª£c ${items.size} v·∫≠t t∆∞ (items).")
                // B·∫°n c√≥ th·ªÉ th√™m assert ·ªü ƒë√¢y ƒë·ªÉ ki·ªÉm tra items kh√¥ng r·ªóng n·∫øu protocol ƒë√≥ c√≥ items
            }

            override fun onError(errorMessage: String) {
                println("‚ùå [Th·∫•t b·∫°i] L·ªói khi l·∫•y chi ti·∫øt: $errorMessage")
                assertTrue("Th·∫•t b·∫°i khi l·∫•y chi ti·∫øt protocol: $errorMessage", false)
            }
        })
        Thread.sleep(testTimeout)
    }

    // ‚úÖ 3. Test UC3: T·∫°o m·ªôt protocol m·ªõi (c√πng v·ªõi c√°c b∆∞·ªõc v√† v·∫≠t t∆∞ c·ªßa n√≥)
    @Test
    fun testCreateNewProtocol() = runBlocking {
        println("üß™ B·∫Øt ƒë·∫ßu test: T·∫°o protocol m·ªõi...")
        // --- Chu·∫©n b·ªã  d·ªØ li·ªáu ---
        val creatorId = 1 // ‚ö†Ô∏è THAY ƒê·ªîI ID ng∆∞·ªùi t·∫°o cho ph√π h·ª£p v·ªõi b·∫£ng User c·ªßa b·∫°n
        val timestamp = System.currentTimeMillis()

        // D·ªØ li·ªáu cho b·∫£ng Protocol
        val newProtocol = Protocol(
            protocolTitle = "Protocol Test t·ª´ Android $timestamp",
            versionNumber = "1.0",
            introduction = "Gi·ªõi thi·ªáu ƒë∆∞·ª£c t·∫°o t·ª± ƒë·ªông.",
            safetyWarning = "C·∫£nh b√°o an to√†n: Lu√¥n c·∫©n th·∫≠n."
            // Kh√¥ng c·∫ßn truy·ªÅn creatorUserId, approveStatus v√¨ h√†m s·∫Ω t·ª± g√°n
        )

        // D·ªØ li·ªáu cho b·∫£ng ProtocolStep
        val newSteps = mutableListOf(
            ProtocolStep(stepOrder = 1, instruction = "B∆∞·ªõc 1: Chu·∫©n b·ªã d·ª•ng c·ª•."),
            ProtocolStep(stepOrder = 2, instruction = "B∆∞·ªõc 2: Th·ª±c hi·ªán th√≠ nghi·ªám."),
            ProtocolStep(stepOrder = 3, instruction = "B∆∞·ªõc 3: Ghi l·∫°i k·∫øt qu·∫£ v√† d·ªçn d·∫πp.")
        )

        // <<< THAY ƒê·ªîI QUAN TR·ªåNG: Chu·∫©n b·ªã d·ªØ li·ªáu cho ProtocolItem >>>
        // Gi·∫£ s·ª≠ trong b·∫£ng "Item" c·ªßa b·∫°n ƒë√£ c√≥ s·∫µn c√°c v·∫≠t t∆∞ v·ªõi c√°c ID sau:
        // - V·∫≠t t∆∞ c√≥ itemId = 1 (v√≠ d·ª•: C·ªëc th·ªßy tinh)
        // - V·∫≠t t∆∞ c√≥ itemId = 5 (v√≠ d·ª•: Axit HCl)
        // - V·∫≠t t∆∞ c√≥ itemId = 12 (v√≠ d·ª•: Gi·∫•y qu·ª≥)
        // ‚ö†Ô∏è B·∫†N PH·∫¢I THAY ƒê·ªîI C√ÅC 'itemId' N√ÄY TH√ÄNH C√ÅC ID C√ì TH·∫¨T TRONG B·∫¢NG 'Item' C·ª¶A B·∫†N
        val newItems = mutableListOf(
            ProtocolItem(itemId = 1, quantity = 1),
            ProtocolItem(itemId = 2, quantity = 2),
            ProtocolItem(itemId = 3, quantity = 3)
        )

        // --- G·ªçi h√†m ---
        repository.createNewProtocol(newProtocol, newSteps, newItems, creatorId, object : IProtocolRepository.ProtocolIdCallback {
            override fun onSuccess(protocolId: Int) {
                println("‚úÖ [Th√†nh c√¥ng] ƒê√£ t·∫°o protocol m·ªõi th√†nh c√¥ng v·ªõi ID = $protocolId")
                assertTrue("ID tr·∫£ v·ªÅ ph·∫£i l·ªõn h∆°n 0", protocolId > 0)
            }

            override fun onError(errorMessage: String) {
                println("‚ùå [Th·∫•t b·∫°i] L·ªói khi t·∫°o protocol: $errorMessage")
                assertTrue("Th·∫•t b·∫°i khi t·∫°o protocol: $errorMessage", false)
            }
        })
        Thread.sleep(testTimeout)
    }





    // ‚úÖ 4. Test UC20/UC21: Ph√™ duy·ªát (Approve) m·ªôt protocol
    @Test
    fun testApproveProtocol() = runBlocking {
        val protocolIdToApprove = 4 // ‚ö†Ô∏è THAY ƒê·ªîI ID n√†y th√†nh m·ªôt protocol c√≥ status "Pending"
        val approverId = 1 // ‚ö†Ô∏è THAY ƒê·ªîI ID ng∆∞·ªùi duy·ªát (Lab Manager)

        println("üß™ B·∫Øt ƒë·∫ßu test: Ph√™ duy·ªát protocol ID = $protocolIdToApprove...")

        repository.approveProtocol(protocolIdToApprove, approverId, true, null, object : IProtocolRepository.GenericCallback {
            override fun onSuccess() {
                println("‚úÖ [Th√†nh c√¥ng] ƒê√£ ph√™ duy·ªát (Approved) protocol ID $protocolIdToApprove!")
            }

            override fun onError(errorMessage: String) {
                println("‚ùå [Th·∫•t b·∫°i] L·ªói khi ph√™ duy·ªát: $errorMessage")
                assertTrue("Th·∫•t b·∫°i khi ph√™ duy·ªát protocol: $errorMessage", false)
            }
        })
        Thread.sleep(testTimeout)
    }

    // ‚úÖ 5. Test UC20/UC21: T·ª´ ch·ªëi (Reject) m·ªôt protocol
    @Test
    fun testRejectProtocol() = runBlocking {
        val protocolIdToReject = 10 // ‚ö†Ô∏è THAY ƒê·ªîI ID n√†y th√†nh m·ªôt protocol c√≥ status "Pending"
        val approverId = 1 // ‚ö†Ô∏è THAY ƒê·ªîI ID ng∆∞·ªùi duy·ªát (Lab Manager)
        val rejectionReason = "L√Ω do t·ª´ ch·ªëi: C√°c b∆∞·ªõc kh√¥ng ƒë·ªß r√µ r√†ng."

        println("üß™ B·∫Øt ƒë·∫ßu test: T·ª´ ch·ªëi protocol ID = $protocolIdToReject...")

        repository.approveProtocol(protocolIdToReject, approverId, false, rejectionReason, object : IProtocolRepository.GenericCallback {
            override fun onSuccess() {
                println("‚úÖ [Th√†nh c√¥ng] ƒê√£ t·ª´ ch·ªëi (Rejected) protocol ID $protocolIdToReject!")
            }

            override fun onError(errorMessage: String) {
                println("‚ùå [Th·∫•t b·∫°i] L·ªói khi t·ª´ ch·ªëi: $errorMessage")
                assertTrue("Th·∫•t b·∫°i khi t·ª´ ch·ªëi protocol: $errorMessage", false)
            }
        })
        Thread.sleep(testTimeout)
    }
}

