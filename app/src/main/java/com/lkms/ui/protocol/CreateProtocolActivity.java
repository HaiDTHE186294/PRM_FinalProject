package com.lkms.ui.protocol;

import android.os.Bundle;
import android.view.MenuItem;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.ProgressBar;
import android.widget.Spinner;
import android.widget.TextView;
import android.widget.Toast;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.app.AppCompatActivity;
import androidx.appcompat.widget.Toolbar;
import androidx.lifecycle.ViewModelProvider;
import androidx.recyclerview.widget.LinearLayoutManager;
import androidx.recyclerview.widget.RecyclerView;
import com.google.android.material.textfield.TextInputEditText;
import com.lkms.R;
import com.lkms.data.model.java.Item;
import com.lkms.data.model.java.Protocol;
import com.lkms.data.model.java.ProtocolItem;
import com.lkms.data.model.java.ProtocolStep;
import com.lkms.ui.protocol.adapter.ItemsDisplayAdapter;
import com.lkms.ui.protocol.adapter.StepsAdapter;
import com.lkms.ui.protocol.viewmodel.CreateProtocolViewModel;
import com.lkms.util.AuthHelper;
import com.lkms.data.repository.enumPackage.java.LKMSConstantEnums.ProtocolApproveStatus;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

public class CreateProtocolActivity extends AppCompatActivity {

    // --- Khai b√°o UI Components ---
    private Toolbar toolbar;
    private TextInputEditText protocolNameInput;
    private TextInputEditText protocolIntroductionInput;
    private TextInputEditText safetyWarningInput;
    private TextInputEditText versionInput;
    private RecyclerView stepsRecyclerView;
    private RecyclerView itemsRecyclerView;
    private Button addStepButton;
    private Button saveProtocolButton;
    private ProgressBar progressBar;

    // --- C√°c View m·ªõi cho vi·ªác ch·ªçn Item ---
    private Spinner selectAvailableItemSpinner;
    private TextInputEditText selectQuantityInput;
    private Button addItemToListButton;

    // --- Khai b√°o Data, Adapters, v√† ViewModel ---
    private StepsAdapter stepsAdapter;
    private ItemsDisplayAdapter itemsAdapter;
    private final List<ProtocolStep> stepsList = new ArrayList<>();
    private final List<ProtocolItem> itemsList = new ArrayList<>();
    private final List<Item> availableItems = new ArrayList<>();
    private ArrayAdapter<Item> availableItemsSpinnerAdapter;
    private CreateProtocolViewModel viewModel;

    @Override
    protected void onCreate(@Nullable Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_create_protocol);

        viewModel = new ViewModelProvider(this).get(CreateProtocolViewModel.class);

        initViews();
        setupToolbar();
        setupAdapters();
        // S·ª≠a ·ªü ƒë√¢y: H√†m setupEventListeners ƒë√£ ƒë∆∞·ª£c chia nh·ªè
        setupEventListeners();
        observeViewModel();

        viewModel.loadInitialData();
    }

    private void initViews() {
        toolbar = findViewById(R.id.toolbar_create_protocol);
        protocolNameInput = findViewById(R.id.edit_text_protocol_name);
        protocolIntroductionInput = findViewById(R.id.edit_text_protocol_introduction);
        safetyWarningInput = findViewById(R.id.edit_text_protocol_safety);
        versionInput = findViewById(R.id.edit_text_protocol_version);
        stepsRecyclerView = findViewById(R.id.recycler_view_steps);
        itemsRecyclerView = findViewById(R.id.recycler_view_items);
        addStepButton = findViewById(R.id.button_add_step);
        saveProtocolButton = findViewById(R.id.button_save_protocol);
        progressBar = findViewById(R.id.progress_bar_create);

        selectAvailableItemSpinner = findViewById(R.id.spinner_select_available_item);
        selectQuantityInput = findViewById(R.id.edit_text_select_quantity);
        addItemToListButton = findViewById(R.id.button_add_item_to_list);
    }

    private void setupToolbar() {
        setSupportActionBar(toolbar);
        if (getSupportActionBar() != null) {
            getSupportActionBar().setDisplayHomeAsUpEnabled(true);
            getSupportActionBar().setDisplayShowHomeEnabled(true);
        }
    }

    private void setupAdapters() {
        stepsAdapter = new StepsAdapter(stepsList);
        stepsRecyclerView.setLayoutManager(new LinearLayoutManager(this));
        stepsRecyclerView.setAdapter(stepsAdapter);

        itemsAdapter = new ItemsDisplayAdapter(itemsList, availableItems);
        itemsRecyclerView.setLayoutManager(new LinearLayoutManager(this));
        itemsRecyclerView.setAdapter(itemsAdapter);

        availableItemsSpinnerAdapter = new ArrayAdapter<Item>(this, android.R.layout.simple_spinner_item, this.availableItems) {
            @NonNull
            @Override
            public View getView(int position, @Nullable View convertView, @NonNull ViewGroup parent) {
                return createSpinnerView(position, convertView, parent, false);
            }

            @Override
            public View getDropDownView(int position, @Nullable View convertView, @NonNull ViewGroup parent) {
                return createSpinnerView(position, convertView, parent, true);
            }

            private View createSpinnerView(int position, @Nullable View convertView, @NonNull ViewGroup parent, boolean isDropDown) {
                TextView textView = (TextView) (isDropDown ?
                        super.getDropDownView(position, convertView, parent) :
                        super.getView(position, convertView, parent));

                Item currentItem = getItem(position);
                if (currentItem != null) {
                    String displayText = String.format(
                            "(T·ªìn kho: %d %s) %s",
                            currentItem.getQuantity(),
                            currentItem.getUnit(),
                            currentItem.getItemName()
                    );
                    textView.setText(displayText);
                }
                return textView;
            }
        };

        selectAvailableItemSpinner.setAdapter(availableItemsSpinnerAdapter);
    }

    // =================================================================================
    // üî• B·∫ÆT ƒê·∫¶U PH·∫¶N T√ÅI C·∫§U TR√öC (REFACTOR)
    // =================================================================================

    /**
     * H√†m ƒëi·ªÅu ph·ªëi, g·ªçi c√°c h√†m con ƒë·ªÉ ƒëƒÉng k√Ω s·ª± ki·ªán cho t·ª´ng n√∫t.
     * Ph∆∞∆°ng th·ª©c n√†y gi·ªù ƒë√¢y c√≥ ƒê·ªô ph·ª©c t·∫°p nh·∫≠n th·ª©c (Cognitive Complexity) r·∫•t th·∫•p.
     */
    private void setupEventListeners() {
        setupAddStepButtonListener();
        setupAddItemButtonListener();
        setupSaveProtocolButtonListener();
    }

    /**
     * X·ª≠ l√Ω s·ª± ki·ªán cho n√∫t "Th√™m b∆∞·ªõc".
     */
    private void setupAddStepButtonListener() {
        addStepButton.setOnClickListener(v -> {
            stepsList.add(new ProtocolStep());
            stepsAdapter.notifyItemInserted(stepsList.size() - 1);
            stepsRecyclerView.smoothScrollToPosition(stepsList.size() - 1);
        });
    }

    /**
     * X·ª≠ l√Ω s·ª± ki·ªán cho n√∫t "Th√™m v·∫≠t t∆∞ v√†o danh s√°ch".
     * Logic validate v√† th√™m v·∫≠t t∆∞ ƒë∆∞·ª£c g√≥i g·ªçn trong h√†m n√†y.
     */
    private void setupAddItemButtonListener() {
        addItemToListButton.setOnClickListener(v -> {
            Item selectedItem = (Item) selectAvailableItemSpinner.getSelectedItem();
            if (selectedItem == null) {
                Toast.makeText(this, "Ch∆∞a c√≥ v·∫≠t t∆∞ ƒë·ªÉ ch·ªçn.", Toast.LENGTH_SHORT).show();
                return;
            }

            // S·ª≠ d·ª•ng Optional ƒë·ªÉ x·ª≠ l√Ω vi·ªác parse s·ªë l∆∞·ª£ng m·ªôt c√°ch an to√†n v√† g·ªçn g√†ng h∆°n
            Optional<Integer> quantityOptional = getValidQuantity(selectedItem);
            if (!quantityOptional.isPresent()) {
                return; // D·ª´ng l·∫°i n·∫øu s·ªë l∆∞·ª£ng kh√¥ng h·ª£p l·ªá
            }
            int quantity = quantityOptional.get();

            // Ki·ªÉm tra xem v·∫≠t t∆∞ ƒë√£ t·ªìn t·∫°i trong danh s√°ch ch∆∞a
            boolean itemExists = itemsList.stream().anyMatch(item -> item.getItemId().equals(selectedItem.getItemId()));
            if (itemExists) {
                Toast.makeText(this, "V·∫≠t t∆∞ n√†y ƒë√£ c√≥ trong danh s√°ch.", Toast.LENGTH_SHORT).show();
                return;
            }

            // N·∫øu t·∫•t c·∫£ ƒë·ªÅu h·ª£p l·ªá, th√™m v√†o danh s√°ch v√† c·∫≠p nh·∫≠t UI
            addNewProtocolItem(selectedItem, quantity);
        });
    }

    /**
     * X·ª≠ l√Ω s·ª± ki·ªán cho n√∫t "L∆∞u Protocol".
     * Logic validate to√†n b·ªô form v√† g·ªçi ViewModel ƒë∆∞·ª£c g√≥i g·ªçn trong h√†m n√†y.
     */
    private void setupSaveProtocolButtonListener() {
        saveProtocolButton.setOnClickListener(v -> {
            String protocolName = protocolNameInput.getText().toString().trim();
            String version = versionInput.getText().toString().trim();

            // Validate c√°c tr∆∞·ªùng b·∫Øt bu·ªôc
            if (!isProtocolInfoValid(protocolName, version)) {
                return;
            }

            // L·ªçc v√† ƒë√°nh s·ªë th·ª© t·ª± c√°c b∆∞·ªõc h·ª£p l·ªá
            List<ProtocolStep> validSteps = getValidSteps();
            if (validSteps.isEmpty()) {
                Toast.makeText(this, "Protocol ph·∫£i c√≥ √≠t nh·∫•t m·ªôt b∆∞·ªõc h·ª£p l·ªá.", Toast.LENGTH_SHORT).show();
                return;
            }

            // T·∫°o ƒë·ªëi t∆∞·ª£ng Protocol v√† g·ªçi ViewModel ƒë·ªÉ l∆∞u
            Protocol protocolData = createProtocolData(protocolName, version);
            viewModel.createProtocol(protocolData, validSteps, itemsList, protocolData.getCreatorUserId());
        });
    }

    // --- C√°c h√†m tr·ª£ gi√∫p (Helper Methods) ƒë∆∞·ª£c t√°ch ra t·ª´ logic ph·ª©c t·∫°p ---

    /**
     * Ki·ªÉm tra v√† tr·∫£ v·ªÅ s·ªë l∆∞·ª£ng h·ª£p l·ªá t·ª´ ng∆∞·ªùi d√πng.
     * @param selectedItem Item ƒë∆∞·ª£c ch·ªçn ƒë·ªÉ ki·ªÉm tra t·ªìn kho.
     * @return Optional ch·ª©a s·ªë l∆∞·ª£ng n·∫øu h·ª£p l·ªá, ng∆∞·ª£c l·∫°i tr·∫£ v·ªÅ Optional r·ªóng.
     */
    private Optional<Integer> getValidQuantity(Item selectedItem) {
        String quantityStr = selectQuantityInput.getText().toString();
        if (quantityStr.isEmpty()) {
            selectQuantityInput.setError("S·ªë l∆∞·ª£ng kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng");
            return Optional.empty();
        }
        try {
            int quantity = Integer.parseInt(quantityStr);
            if (quantity <= 0) {
                selectQuantityInput.setError("S·ªë l∆∞·ª£ng ph·∫£i l·ªõn h∆°n 0");
                return Optional.empty();
            }
            if (quantity > selectedItem.getQuantity()) {
                selectQuantityInput.setError("Kh√¥ng th·ªÉ v∆∞·ª£t qu√° t·ªìn kho (" + selectedItem.getQuantity() + ")");
                return Optional.empty();
            }
            selectQuantityInput.setError(null); // X√≥a l·ªói n·∫øu h·ª£p l·ªá
            return Optional.of(quantity);
        } catch (NumberFormatException e) {
            selectQuantityInput.setError("S·ªë l∆∞·ª£ng kh√¥ng h·ª£p l·ªá");
            return Optional.empty();
        }
    }

    /**
     * Th√™m m·ªôt v·∫≠t t∆∞ m·ªõi v√†o danh s√°ch v√† c·∫≠p nh·∫≠t UI.
     */
    private void addNewProtocolItem(Item selectedItem, int quantity) {
        ProtocolItem newItem = new ProtocolItem();
        newItem.setItemId(selectedItem.getItemId());
        newItem.setQuantity(quantity);

        itemsList.add(newItem);
        itemsAdapter.notifyItemInserted(itemsList.size() - 1);
        itemsRecyclerView.smoothScrollToPosition(itemsList.size() - 1);

        // Reset c√°c tr∆∞·ªùng nh·∫≠p li·ªáu
        selectQuantityInput.setText("");
        selectQuantityInput.clearFocus();
        selectAvailableItemSpinner.setSelection(0);
    }

    /**
     * Ki·ªÉm tra th√¥ng tin c∆° b·∫£n c·ªßa Protocol (t√™n v√† phi√™n b·∫£n).
     */
    private boolean isProtocolInfoValid(String protocolName, String version) {
        if (protocolName.isEmpty()) {
            protocolNameInput.setError("T√™n protocol kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng");
            return false;
        }
        if (version.isEmpty()) {
            versionInput.setError("Phi√™n b·∫£n kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng");
            return false;
        }
        return true;
    }

    /**
     * L·∫•y danh s√°ch c√°c b∆∞·ªõc h·ª£p l·ªá (c√≥ n·ªôi dung) v√† ƒë√°nh s·ªë th·ª© t·ª± cho ch√∫ng.
     */
    private List<ProtocolStep> getValidSteps() {
        List<ProtocolStep> validSteps = new ArrayList<>();
        for (ProtocolStep step : stepsList) {
            if (step.getInstruction() != null && !step.getInstruction().trim().isEmpty()) {
                validSteps.add(step);
            }
        }
        // ƒê√°nh s·ªë th·ª© t·ª± cho c√°c b∆∞·ªõc h·ª£p l·ªá
        for (int i = 0; i < validSteps.size(); i++) {
            validSteps.get(i).setStepOrder(i + 1);
        }
        return validSteps;
    }

    /**
     * T·∫°o ƒë·ªëi t∆∞·ª£ng Protocol t·ª´ d·ªØ li·ªáu ng∆∞·ªùi d√πng nh·∫≠p.
     */
    private Protocol createProtocolData(String protocolName, String version) {
        Protocol protocolData = new Protocol();
        protocolData.setProtocolTitle(protocolName);
        protocolData.setIntroduction(protocolIntroductionInput.getText().toString().trim());
        protocolData.setSafetyWarning(safetyWarningInput.getText().toString().trim());
        protocolData.setVersionNumber(version);
        protocolData.setApproveStatus(ProtocolApproveStatus.APPROVED);
        protocolData.setCreatorUserId(AuthHelper.getLoggedInUserId(getApplicationContext()));
        return protocolData;
    }

    // =================================================================================
    // üî• K·∫æT TH√öC PH·∫¶N T√ÅI C·∫§U TR√öC
    // =================================================================================

    private void observeViewModel() {
        viewModel.isLoading().observe(this, isLoading -> {
            progressBar.setVisibility(isLoading ? View.VISIBLE : View.GONE);
            saveProtocolButton.setEnabled(!isLoading);
        });

        viewModel.getCreationSuccess().observe(this, protocolId -> {
            if (protocolId != null) {
                Toast.makeText(this, "T·∫°o protocol th√†nh c√¥ng!", Toast.LENGTH_LONG).show();
                finish();
            }
        });

        viewModel.getError().observe(this, errorMessage -> {
            if (errorMessage != null && !errorMessage.isEmpty()) {
                Toast.makeText(this, "L·ªói: " + errorMessage, Toast.LENGTH_LONG).show();
            }
        });

        viewModel.getItems().observe(this, items -> {
            if (items != null) {
                this.availableItems.clear();
                this.availableItems.addAll(items);
                this.availableItemsSpinnerAdapter.notifyDataSetChanged();

                boolean hasItems = !items.isEmpty();
                selectAvailableItemSpinner.setEnabled(hasItems);
                selectQuantityInput.setEnabled(hasItems);
                addItemToListButton.setEnabled(hasItems);
            }
        });
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        if (item.getItemId() == android.R.id.home) {
            finish();
            return true;
        }
        return super.onOptionsItemSelected(item);
    }
}
